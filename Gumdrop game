// Name: MINH NGOC LE
// Class: COMP 142 Section 2
// Descr
// NAME: Minh Ngoc Le
// Class: COMP 142
// Description: Design a Gumdrop Gatherer game
// Pledge: I have neither given nor received unauthorized aid on this program.
package project2;
    
   import java.awt.*;
   import java.util.Arrays;
   import java.util.Scanner;
   
   public class GumdropGatherer {
   
       /**
        * The main control function for the game.
        */
       public static void main(String[] args) {
           int currentPoint = 0;
           Scanner scanner = new Scanner(System.in);
   
           System.out.println("How many rows do you want? ");
           int row = scanner.nextInt();
           System.out.println("How many columns do you want? ");
           int col = scanner.nextInt();
           System.out.println("How many points do you want to play? ");
           int point = scanner.nextInt();
   
           SimpleCanvas mycanvas = new SimpleCanvas(row * 40, col * 40);
           mycanvas.show();
           int[][] board = new int[row][col];
           System.out.println(board[0].length);
           for (int i = 0; i < board.length; i++) {
               for (int j = 0; j < board[0].length; j++) {
                   board[i][j] = (int) (Math.random() * 4 + 1);
               }
           }
           while (currentPoint < point) {
               System.out.println("Current Points:" + currentPoint);
               draw(mycanvas, board);
               int[] clickedRowCol = handleMouseClick(mycanvas, board);
               int clickedRow = clickedRowCol[0];
               int clickedCol = clickedRowCol[1];
   
               spreadMarked(board, clickedRow, clickedCol);
               int removed = removeMarked(board);
               while(gravity(board)) {
                   mycanvas.pause(200);
                   draw(mycanvas, board);
               }
               fillEmptySlots(board);
               draw(mycanvas, board);
               //Caculate points earned
               int earnedPoints = calPoints(removed);
               currentPoint += earnedPoints;
               System.out.println("Earned Points: " + earnedPoints);
   
   
               printBoard(board);
           }
   
   
   
       System.out.println("Game over! Final Score: " + currentPoint);
  
   
           // Algorithm:
           // Ask for input for rows, columns, and points.
           // Set up the canvas.
           // Initialize the board to random numbers (gumdrop colors).
           // As long as the game is not over:
           //      Print out how many points the player has.
           //      Draw the board.
           //      Let the user pick a gumdrop (but only one with at least one neighbor of the same color).
           //      "Mark" the gumdrop by switching it to its negative value.
           //      Spread the negative number to all neighbors of the same (positive) number, until it can't spread anymore.
           //      Draw the board (with white for the marked gumdrops).
           //      Replace the marked gumdrops with empty spaces (zeroes).
           //      Let gravity bring down any gumdrops that need to come down.  Draw the board after each iteration of gravity.
           //      Fill the empty slots on the board with random gumdrops.
           //      Draw the board.
           //      Calculate how many points are earned, and update the user's score.
           // When the game ends, print the final score.
       }
   
       /**
        * Draws the current state of the gumdrop board on the canvas.
        */
       public static void draw(SimpleCanvas canvas, int[][] board) {
          canvas.clear();
  
  
          for (int row = 0; row < board.length; row++) {
              for (int col = 0; col < board[row].length; col++) {
                  int centerX = 40 * col + 20;
                  int centerY = 40 * row + 20;
                  if (board[row][col] == 1) {
                      canvas.setPenColor(Color.RED);
                      canvas.drawFilledCircle(centerX, centerY, 20);
                  } else if (board[row][col] == 2) {
                      canvas.setPenColor(Color.BLUE);
                      canvas.drawFilledCircle(centerX, centerY, 20);
                  } else if (board[row][col] == 3) {
                      canvas.setPenColor(Color.YELLOW);
                      canvas.drawFilledCircle(centerX, centerY, 20);
                  } else if (board[row][col] == 4) {
                      canvas.setPenColor(Color.GREEN);
                      canvas.drawFilledCircle(centerX, centerY, 20);
                  }
  
                  // Fill in code here.  Use tic-tac-toe as a guide.
                  // Remember that each gumdrop number represents what color it should be:
                  // 1-4 are colors of your choice, negative numbers indicate "marked" gumdrops
                  // that are about to be removed, and should be drawn white (or some other special color),
                  // and 0 is an empty cell.
  
  
              }
          }
          canvas.update();
      }
  
  
      public static int[] handleMouseClick(SimpleCanvas canvas, int[][] board) {
          int[] clickedRowCol = new int[2];
          boolean madeValidMove = false;
  
          while (!madeValidMove) {
              canvas.waitForClick();
              int mouseX = canvas.getMouseClickX();
              int mouseY = canvas.getMouseClickY();
  
              int row = mouseY / 40;
              int col = mouseX / 40;
  
              clickedRowCol[0] = row;
              clickedRowCol[1] = col;
  
              if (hasMatchingneighbor(board, row, col)) {
                  madeValidMove = true;
              }
          }
  
          return clickedRowCol;
      }
  
      public static boolean hasMatchingneighbor(int[][] board, int row, int col) {
          int clickedColor = board[row][col];
          if (row > 0 && board[row - 1][col] == clickedColor) {
              return true;
          } else if (row < board.length - 1 && board[row + 1][col] == clickedColor) {
              return true;
          } else if (col > 0 && board[row][col - 1] == clickedColor) {
              return true;
          } else if ((col < (board[0].length - 1)) && (board[row][col + 1] == clickedColor)) {
              return true;
          }
          return false;
      }
      public static void spreadMarked(int[][] board, int row, int col) {
          int clickedColor = board[row][col];
          board[row][col] = -clickedColor;
  
          // Spread to valid neighbors
          if (row > 0 && board[row - 1][col] == clickedColor) {
              spreadMarked(board, row - 1, col);
          }
          if (row < board.length - 1 && board[row + 1][col] == clickedColor) {
              spreadMarked(board, row + 1, col);
          }
          if (col > 0 && board[row][col - 1] == clickedColor) {
              spreadMarked(board, row, col - 1);
          }
          if (col < board[0].length - 1 && board[row][col + 1] == clickedColor) {
              spreadMarked(board, row, col + 1);
          }
      }
  
      public static int removeMarked(int[][] board) {
          int removed = 0;
          for (int row = 0; row < board.length; row++) {
              for (int col = 0; col < board[0].length; col++) {
                  if (board[row][col] < 0) {
                      removed++;
                      board[row][col] = 0;
                  }
              }
          }
          return removed;
      }
  
      public static boolean gravity(int[][] board){
          boolean check_gravity = false;
          for (int row = board.length - 1; row > 0; row--) {
              for (int col = 0; col < board[0].length; col++) {
                  if(board[row][col] == 0 && board[row - 1][col] > 0) {
                      check_gravity = true;
                      int currow = row;
                      while (board[currow][col] == 0 && board[currow - 1][col] > 0) {
                          board[currow][col] = board[currow - 1][col];
                          board[currow - 1][col] = 0;
                          if (currow != 1) {
                              currow--;
                          }
                      }
                  }
              }
          }
          return check_gravity;
      }
      public static int calPoints(int gumdrops){
          int earnedPoints = 0;
          if (gumdrops < 5) {
              earnedPoints = gumdrops * 10;
          }
          else if (gumdrops < 10) {
              earnedPoints = gumdrops * 50;
          }
          else {
              earnedPoints = gumdrops * 100;
          }
          return earnedPoints;
  
      }
      public static void fillEmptySlots(int[][] board) {
          for (int row = board.length - 1; row >= 0; row--) {
              for (int col = 0; col < board[0].length; col++) {
                  if (board[row][col] == 0) {
                      board[row][col] = (int) (Math.random() * 4 + 1);
                  }
              }
          }
      }
  

 
  
         /**
          * Prints the state of the gumdrop board.  Useful for when the graphics aren't working yet.
          */
         public static void printBoard ( int[][] board){
             for (int row = 0; row < board.length; row++) {
                  System.out.println(Arrays.toString(board[row]));
              }
         }
      }
    
